import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import numpy as np
from PIL import Image

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

train_images, test_images = train_images / 255.0, test_images / 255.0

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10)  
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

print("Training the model. This may take a while...")
model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))

def classify_image(image_path):
    img = Image.open(image_path).convert("RGB").resize((32, 32))
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)  

    predictions = model.predict(img_array)
    predicted_label = np.argmax(predictions[0])

    print(f"The image is classified as: {class_names[predicted_label]}")

image_path = input("Enter the file path of the image to classify: ")
classify_image(image_path)
